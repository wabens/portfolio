{"version":3,"sources":["components/ProjectCard/ProjectCard.js","components/Projects/Projects.js","components/Admin/Admin.js","components/App/App.js","registerServiceWorker.js","index.js"],"names":["ProjectCard","classes","this","props","react_default","a","createElement","Card_default","className","card","cardDiv","height","width","src","project","thumbnail","alt","name","description","Component","withStyles","minWidth","minHeight","margin","padding","display","flexDirection","alignContent","textAlign","Projects","dispatch","type","Grid_default","container","reduxState","projects","map","item","components_ProjectCard_ProjectCard","key","id","connect","Admin","state","website","github","date_completed","tag_id","handleChange","event","console","log","target","value","_this","setState","Object","defineProperty","TextField_default","label","onChange","variant","App","components_Admin_Admin","components_Projects_Projects","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","getPortfolio","rootSaga","action","getResponse","regenerator_default","wrap","_context","prev","next","axios","get","sent","put","payload","data","t0","alert","stop","_marked","_context2","takeEvery","_marked2","sagaMiddleware","createSagaMiddleware","storeInstance","createStore","combineReducers","arguments","length","undefined","tags","applyMiddleware","logger","run","ReactDOM","render","es","store","components_App_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f3b33f70.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport Card from '@material-ui/core/Card';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst styles = {\n    card: {\n      minWidth: 295,\n      minHeight:457,\n      margin: 10,\n      padding: 10,\n      display: \"flex\",\n      flexDirection: \"column\",\n    //   alignContent: \"top\",\n    //   justifyContent: \"center\"\n    },\n    cardDiv: {\n        margin: \"0 auto 0 auto\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignContent: \"center\",\n        textAlign: \"center\"\n       \n    }\n}\n\nclass ProjectCard extends Component {\n    \n  render(){\n        const { classes } = this.props;\n    return (\n        <Card className={classes.card}>\n        <img className={classes.cardDiv} height='200' width='300'src={this.props.project.thumbnail} alt={this.props.project.name} />\n        <div className={classes.cardDiv}>\n            <p>{this.props.project.name}</p>\n            <p>{this.props.project.description}</p>\n        </div>\n        </Card>\n    )\n}\n}\n// const mapReduxStateToProps = reduxState => ({\n//     reduxState\n// })\n\nexport default withStyles(styles)(ProjectCard);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport ProjectCard from '../ProjectCard/ProjectCard'\n\nclass Projects extends Component {\n\n    componentDidMount(){\n        this.props.dispatch({type: 'GET_PORTFOLIO'})\n    }\n\n    render() {\n    return (\n      <section>\n          {/* {JSON.stringify(this.props.reduxState)} */}\n        <Grid container>\n            { \n            this.props.reduxState.projects.map(project =>\n                <Grid item>\n                    <ProjectCard key={project.id} project={project}/>\n                    {/* {JSON.stringify(project)} */}\n\n                </Grid>)\n            }\n      </Grid>\n      </section>\n    );\n  }\n}\n\nconst mapReduxStateToProps = reduxState => ({\n  reduxState\n})\n\nexport default connect(mapReduxStateToProps)(Projects);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\n\n\n\nclass Admin extends Component {\n     // Renders the entire app on the DOM\n\n    state={\n        project: {\n            name: '', \n            description: '', \n            thumbnail: '', \n            website: '', \n            github: '',\n            date_completed: '', \n            tag_id: '',\n        }\n    }\n\n    handleChange = (event) => {\n        console.log(`handleChange `, event.target.value);\n        this.setState({\n            project:{\n                [event.target.name]: event.target.value\n            }\n        })\n        \n        \n    }\n\n    render() {\n        return (\n        <section>\n            <form>\n                <TextField\n                    label=\"Name\"\n                    name = 'name'\n                    value={this.state.project.name}\n                    onChange={this.handleChange}\n                    margin=\"normal\"\n                    variant = \"outlined\"\n\n                />\n                <TextField\n                    label=\"Description\"\n                    name = 'description'\n                    value={this.state.project.description}\n                    onChange={this.handleChange}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                />\n                <TextField\n                    label=\"Thumbnail\"\n                    value={this.state.project.thumbnail}\n                    name = 'thumbnail'\n                    onChange={this.handleChange}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                />\n                <TextField\n                    label=\"Website\"\n                    value={this.state.project.website}\n                    name = 'website'\n                    onChange={this.handleChange}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                />\n                <TextField\n                    label=\"Github\"\n                    value={this.state.project.github}\n                    name = 'github'\n                    onChange={this.handleChange}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                />\n                <TextField\n                    label=\"Date\"\n                    value={this.state.project.date_completed}\n                    name = 'date_completed'\n                    onChange={this.handleChange}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                />\n            </form>\n        </section>\n        );\n  }\n}\n\nconst mapReduxStateToProps = reduxState => ({\n  reduxState\n})\n\nexport default connect(mapReduxStateToProps)(Admin);","import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport Projects from '../Projects/Projects';\nimport Admin from '../Admin/Admin';\n\nclass App extends Component {\n  // Renders the entire app on the DOM\n  render() {\n    return (\n      <section>\n        <p>Empty Page</p>\n        <Admin/>\n        <Projects/>\n      </section>\n\n    );\n  }\n}\n\nconst mapReduxStateToProps = reduxState => ({\n  reduxState\n})\n\nexport default connect(mapReduxStateToProps)(App);","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport axios from 'axios';\n// Provider allows us to use redux within our react app\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\n// Import saga middleware\nimport createSagaMiddleware from 'redux-saga';\nimport { takeEvery, put } from 'redux-saga/effects';\n\n\nfunction* getPortfolio(action) {\n  try {\n    console.log('GET portfolio', action);\n    const getResponse = yield axios.get('/portfolio'); \n    yield put({type: 'SET_PROJECTS', payload: getResponse.data});\n }catch (error) {\n    console.log(`Couldn't get portfolio`, error);\n    alert(`Sorry, couldn't get the portfolio. Try again later`);\n  };\n};\n\n\n// Create the rootSaga generator function\nfunction* rootSaga() {\n    yield takeEvery('GET_PORTFOLIO', getPortfolio)\n\n}\n\n// Create sagaMiddleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// Used to store projects returned from the server\nconst projects = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_PROJECTS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n// Used to store the project tags (e.g. 'React', 'jQuery', 'Angular', 'Node.js')\nconst tags = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_TAGS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n// Create one store that all components can use\nconst storeInstance = createStore(\n    combineReducers({\n        projects,\n        tags,\n    }),\n    // Add sagaMiddleware to our store\n    applyMiddleware(sagaMiddleware, logger),\n);\n\n// Pass rootSaga into our sagaMiddleware\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(<Provider store={storeInstance}><App /></Provider>, \n    document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}